import Point from '@Classes/Point.js';

export default class Shape {

	constructor(name) {
		this.prepare = {
			'multiple-private': {0: 205, 5: 206, 10: 208, 15: 212, 20: 218, 26: 228, 30: 201, 32: 190, 35: 176, 40: 158, 45: 143, 50: 131, 55: 123, 60: 116, 65: 111, 70: 107, 75: 105, 80: 102, 85: 101, 90: 101, 95: 101, 100: 103, 105: 105, 110: 108, 114: 111, 120: 117, 125: 124, 130: 132, 135: 144, 140: 158, 145: 177, 148: 191, 154: 229, 160: 219, 165: 213, 170: 209, 175: 207, 180: 206, 185: 207, 190: 209, 195: 213, 200: 219, 206: 229, 210: 205, 212: 194, 215: 179, 220: 160, 225: 146, 230: 135, 235: 126, 240: 119, 245: 114, 250: 110, 255: 107, 260: 105, 265: 103, 270: 103, 275: 103, 280: 105, 285: 106, 290: 109, 295: 113, 300: 119, 305: 125, 310: 134, 315: 145, 320: 159, 325: 178, 328: 193, 330: 205, 334: 229, 340: 218, 345: 213, 350: 208, 355: 206, 360: 205},
			'multiple-public':  {0: 223, 5: 222, 10: 219, 15: 215, 20: 209, 26: 200, 30: 193, 32: 189, 35: 182, 40: 170, 45: 157, 50: 145, 55: 136, 60: 128, 65: 122, 70: 118, 75: 115, 80: 113, 85: 111, 90: 111, 95: 111, 100: 113, 105: 115, 110: 118, 114: 122, 120: 129, 125: 136, 130: 145, 135: 158, 140: 170, 145: 183, 148: 190, 154: 201, 160: 210, 165: 216, 170: 220, 175: 223, 180: 224, 185: 223, 190: 220, 195: 216, 200: 211, 206: 202, 210: 194, 212: 190, 215: 183, 220: 171, 225: 158, 230: 146, 235: 137, 240: 129, 245: 123, 250: 119, 255: 116, 260: 114, 265: 112, 270: 112, 275: 112, 280: 114, 285: 116, 290: 119, 295: 123, 300: 129, 305: 136, 310: 146, 315: 158, 320: 170, 325: 182, 328: 189, 330: 193, 334: 201, 340: 210, 345: 215, 350: 219, 355: 222, 360: 223},
			'single-private':   {0: 205, 5: 206, 10: 208, 15: 212, 20: 218, 26: 228, 30: 201, 32: 190, 35: 176, 40: 158, 45: 143, 50: 131, 55: 123, 60: 116, 65: 111, 70: 107, 75: 105, 80: 102, 85: 101, 90: 101, 95: 101, 100: 103, 105: 105, 110: 108, 114: 111, 120: 117, 125: 124, 130: 132, 135: 144, 140: 158, 145: 177, 148: 191, 154: 229, 160: 219, 165: 213, 170: 209, 175: 207, 180: 206, 185: 207, 190: 209, 195: 213, 200: 219, 206: 229, 210: 205, 212: 194, 215: 179, 220: 160, 225: 146, 230: 135, 235: 126, 240: 119, 245: 114, 250: 110, 255: 107, 260: 105, 265: 103, 270: 103, 275: 103, 280: 105, 285: 106, 290: 109, 295: 113, 300: 119, 305: 125, 310: 134, 315: 145, 320: 159, 325: 178, 328: 193, 330: 205, 334: 229, 340: 218, 345: 213, 350: 208, 355: 206, 360: 205},
			'single-public':    {0: 221, 5: 214, 10: 208, 15: 205, 20: 202, 26: 202, 30: 203, 32: 204, 35: 190, 40: 170, 45: 154, 50: 142, 55: 133, 60: 125, 65: 120, 70: 116, 75: 113, 80: 111, 85: 109, 90: 109, 95: 109, 100: 111, 105: 113, 110: 116, 114: 120, 120: 126, 125: 133, 130: 143, 135: 155, 140: 170, 145: 191, 148: 206, 154: 204, 160: 204, 165: 206, 170: 209, 175: 214, 180: 221, 185: 214, 190: 208, 195: 205, 200: 203, 206: 203, 210: 205, 212: 205, 215: 189, 220: 170, 225: 154, 230: 142, 235: 133, 240: 126, 245: 120, 250: 116, 255: 113, 260: 111, 265: 109, 270: 109, 275: 109, 280: 111, 285: 113, 290: 116, 295: 120, 300: 125, 305: 132, 310: 141, 315: 153, 320: 169, 325: 189, 328: 204, 330: 203, 334: 202, 340: 202, 345: 204, 350: 207, 355: 213, 360: 221},		};
		this.bounds = {
			'multiple-private': {},
			'multiple-public':  {},
			'single-public':    {},
			'single-private':   {},
		};
		this.legenda= {
			1: 'multiple-private',
			2: 'multiple-public',
			3: 'single-public',
			4: 'single-private',
		};

		let last, lastdeg, nextdeg, dist;
		for(let leg=1; leg < 5; leg++){
			let type = this.legenda[leg];
			for(let deg = 0; deg <= 360; deg++){
				if ( this.prepare[type][deg] !== undefined ){
					this.bounds[type][deg] = this.prepare[type][deg];
					last    = this.prepare[type][deg];
					lastdeg = deg;
				}else{
					nextdeg = deg; while ( this.prepare[type][nextdeg] === undefined ){ nextdeg++; }
					dist    = (deg - lastdeg) / (nextdeg - lastdeg);
					this.bounds[type][deg] = last * (1-dist) + this.prepare[type][nextdeg] * dist;
				}
			}
		}
	};

	in_center(shape, degree, distance) {
		let deg = Math.round(degree % 360);
		let border = this.bounds[shape][deg] * global.constants.bf;
		return border > distance;
	};

	offset(shape, degree, dir, pol) {
        const g = global.constants; // see classes/Constant for values

        let mulx = 2.6;
        let muly = 2.6;

        let deg = Math.round((degree + 360) % 360);
		let mul = (shape === 'pointer') ? 20 : this.bounds[shape][deg];

		let x = mul / mulx * Math.cos(degree * g.d2r);
		let y = mul / muly * Math.sin(degree * g.d2r);

		return { x, y };
	};

}

